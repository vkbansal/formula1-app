---
import type { GetStaticPathsItem } from 'astro';
import { loadData } from 'helpers/data';
import type { Constructor, Season } from 'helpers/data';
import MainLayout from 'layouts/MainLayout.astro';
import Breadcrumbs from 'components/Breadcrumbs.astro';
import { Nationality } from 'components/Nationality';
import { ConstructorSeasonsTable } from 'client/constructor/ConstructorSeasonsTable';

export interface Props {
	constructor: Constructor;
	totalRoundsInSeasons: Record<number, number>;
}

export type StaticPathsItem = Omit<GetStaticPathsItem, 'props'> & { props: Props };
export async function getStaticPaths(): Promise<StaticPathsItem[]> {
	const allConstructors = await loadData('constructors');
	const seasons = await loadData('seasons');
	const seasonsMap = seasons.reduce<Record<string, Season>>((p, c) => ({ ...p, [c.year]: c }), {});

	return allConstructors.map((con) => {
		const totalRoundsInSeasons = con.seasons.reduce<Record<number, number>>((p, c) => {
			return { ...p, [c.year]: seasonsMap[c.year].rounds.length };
		}, {});

		return {
			params: { constructorRef: con.constructorRef },
			props: { constructor: con, totalRoundsInSeasons },
		};
	});
}

const { constructor: con, totalRoundsInSeasons } = Astro.props as Props;
const maxRounds = Math.max(...Object.values(totalRoundsInSeasons));
const wonChampionships = con.championshipStandings
	.filter((c) => c.position === 1)
	.map((c) => c.year);
const winPct = `${
	con.totalRaces > 0 ? ((con.raceWins * 100) / con.totalRaces).toFixed(2) : '0.00'
}%`;
---

<MainLayout title={con.name}>
	<div class="constructor-page">
		<Breadcrumbs
			links={[
				{ label: 'Constructors', href: '/constructors/' },
				{ label: con.name, href: '' },
			]}
		/>
		<h1>{con.name}</h1>
		<table class="table table-sm">
			<tbody>
				<tr>
					<th>Name</th>
					<td>{con.name}</td>
				</tr>
				<tr>
					<th>Natioanality</th>
					<td>
						<span>{con.nationality}</span>
						<Nationality nationality={con.nationality} />
					</td>
				</tr>
				<tr>
					<th>Total Races</th>
					<td>{con.totalRaces}</td>
				</tr>
				<tr>
					<th>Races Won</th>
					<td>{con.raceWins} ({winPct})</td>
				</tr>
				<tr>
					<th>Podiums</th>
					<td>{con.podiums}</td>
				</tr>
				<tr>
					<th>World Championships Won</th>
					<td>
						<span>{wonChampionships.length}</span>
						{wonChampionships.length > 0 ? <span>({wonChampionships.join(', ')})</span> : null}
					</td>
				</tr>
			</tbody>
		</table>
		<br />
		<br />
		<h2>Race Results</h2>
		<ConstructorSeasonsTable maxRounds={maxRounds} data={con} />
	</div>
</MainLayout>

<style lang="scss">
	.constructor-page {
		margin-bottom: 4rem;

		:global(.driver-name-cell) {
			padding-left: 0.5rem !important;
		}
	}
</style>
