---
import MainLayout from 'layouts/main.astro';
import WorldMap from 'components/world-map.astro';
import numOfEntitiesQuery from 'queries/numOfEntities';
import racesByCountryQuery from 'queries/racesByCountry'

const numOfEntities = await numOfEntitiesQuery()
const racesByCountry = await racesByCountryQuery()
---
<style lang="scss">
.wrapper {
  padding-top: 0;
}

.world-map-container {
  margin: -1rem 0 2rem 0;
  padding: 4rem 0;
}

.world-map-wrapper {
  position: relative;
  width: 100%;
  border: 1px solid transparent;
  max-height: calc(100vh - var(--header-height));

  & > svg {
    width: 100%;

    & path {
      fill: white;
      transform-origin: center center;
    }
  }

  #world-map-tooltip {
    position: absolute;
    display: none;
    top: 0;
    left: 0;
    width: 0;
    height: 0;
    border: 0.5rem solid transparent;
    border-top-color: var(--black);
    filter: drop-shadow(0 2px 4px #888);

    &::before {
      content: attr(data-text);
      display: block;
      position: absolute;
      padding: 1rem;
      bottom: 100%;
      left: 0;
      background-color: var(--black);
      border-radius: 0.5rem;
      white-space: nowrap;
      transform: translate(-50%, -0.5rem);
    }
  }
}

.stats {
  font-size: 3rem;
  text-align: center;

  & > p {
    margin-bottom: 1em;
  }
}

.number {
  color: var(--f1-red);
  font-size: 1.5em;
}
</style>
<MainLayout title="Home">
  <div class="world-map-container">
    <div class="world-map-wrapper">
      <WorldMap/>
      <div id="world-map-tooltip"></div>
    </div>
  </div>
  <div class="stats">
    <p><span class="number">{numOfEntities.seasons}</span> Seasons</p>
    <p><span class="number">{numOfEntities.drivers}</span> Drivers from <span class="number">{numOfEntities.driver_nationalities}</span> Nationalities</p>
    <p><span class="number">{numOfEntities.constructors}</span> Constructors</p>
    <p><span class="number">{numOfEntities.circuits}</span> Circuits across <span class="number">{numOfEntities.circuit_countries}</span> Countries</p>
  </div>
</MainLayout>
<script type="module" define:vars={{ racesByCountry }}>
  const MAX = racesByCountry.data[0].count
  const MIN = racesByCountry.data[racesByCountry.data.length - 1].count

  const svg = document.getElementById('world-map');
  const tooltip = document.getElementById('world-map-tooltip')
  let tooltipTimer = null

  svg.addEventListener('mouseover', (e) => {
    if (e.target.tagName === 'path') {
      if (tooltipTimer) {
        window.clearTimeout(tooltipTimer);
      }
      const box = e.target.getBBox();
      const country = e.target.getAttribute('name');
      const index = racesByCountry.indexMap[country];
      const count = typeof index === 'number' ? racesByCountry.data[index].count : 0;
      const svgScale = svg.clientWidth / 2000

      tooltip.setAttribute('data-text', `${country}: ${count} races till date`);
      tooltip.style.transform = `translate(${(box.x + (box.width / 2)) * svgScale}px, ${(box.y + (box.height / 2)) * svgScale}px)`;
      tooltip.style.display = 'block';
    }
  });

  svg.addEventListener('mouseout', (e) => {
    if (tooltipTimer) {
      window.clearTimeout(tooltipTimer);
    }
    tooltipTimer = window.setTimeout(() => {
      tooltip.style.display = 'none'
    }, 200)
  });

  racesByCountry.data.forEach(({ country, count }) => {
    if (country === 'Korea') {
      country = 'South Korea'
    }

    const elems = svg.querySelectorAll(`path[name="${country}"]`);

    if (elems.length === 0) {
      console.log(`Could not locate "${country}" in the svg map`);
      return
    }

    const lightness = 100 - ((count - MIN) * 44 / (MAX - MIN));

    elems.forEach((elem) => {
      elem.setAttribute('fill', `hsla(2deg, 100%, ${lightness.toFixed(0)}%, 1)`)
    })
  });
</script>
