---
import MainLayout from '~/layouts/MainLayout.astro';
import f1Logo from '~/images/f1-logo.svg';
import numOfEntities from '~/data/homepage.json';

export const prerender = true;
---

<MainLayout title="Home" class="home-page">
	<div class="wrapper">
		<span>Till date, there have been</span>
		<span class="facts-typing fact"><span id="facts"></span></span>
		<span>in the</span>
		<span><img class="logo" src={f1Logo.src} /> World Championships</span>
	</div>
</MainLayout>

<script define:vars={{ numOfEntities }}>
	(() => {
		const facts = document.getElementById('facts');
		const linesToType = [
			`${numOfEntities.seasons - 1} Seasons`,
			`${numOfEntities.drivers} Drivers`,
			`${numOfEntities.constructors} Constructors`,
			`${numOfEntities.races} Grand prix races`,
			`${numOfEntities.driverChampions} Driver Champions`,
			`${numOfEntities.constructorChampions} Constructor Champions`,
		];

		let currentLine = 0;
		let eraseLine = false;
		facts.innerHTML = '';

		function type() {
			if (!facts) return;

			const lineToType = linesToType[currentLine];
			const typedLine = facts.innerHTML;
			let update = facts.innerHTML;
			let timeout = 100;

			// check is erase flag is true
			if (eraseLine) {
				// remove a char from end
				update = typedLine.slice(0, -1);

				// if erase is complete, reset the erase flag
				if (update === '') {
					eraseLine = false;
				}
			} else {
				let charToType = linesToType[currentLine].charAt(typedLine.length);
				update = typedLine + charToType;

				// if the line is complete, increase the delay before start erasing
				if (update === lineToType) {
					eraseLine = true;
					currentLine = (currentLine + 1) % linesToType.length;
					timeout = 2000;
				}
			}

			facts.innerHTML = update;
			window.setTimeout(type, timeout);
		}

		type();
	})();
</script>

<style lang="scss">
	@use '../styles/breakpoints' as bp;

	:global(.home-page) {
		display: flex;
		align-items: center;
	}

	.wrapper {
		text-align: center;
		line-height: 2;
		margin: auto;
		font-weight: 400;
		height: 100%;
		font-size: 2.5rem;

		@media (max-width: bp.$md) {
			font-size: 2rem;
		}

		& > span {
			display: flex;
			align-items: center;
			justify-content: center;
			flex-wrap: wrap;
		}

		.logo {
			height: 1em;
			margin: 0.25em;
		}
	}

	.facts-typing {
		display: flex;
		flex-wrap: wrap;

		& > span {
			display: inline-block;

			&::after {
				content: '';
				display: inline-block;
				width: 0.15rem;
				animation: blink 1s infinite;
				height: 1em;
				background: currentColor;
				transform: translate(100%, 20%);
			}
		}
	}

	.fact {
		font-weight: 500;
		display: inline-block;
		line-height: inherit;
		font-size: 1.1em;
	}

	@keyframes blink {
		0% {
			opacity: 1;
		}
		49% {
			opacity: 1;
		}
		50% {
			opacity: 0;
		}
		99% {
			opacity: 0;
		}
		100% {
			opacity: 1;
		}
	}
</style>
