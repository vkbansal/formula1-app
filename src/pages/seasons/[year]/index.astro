---
import { getEntry } from 'astro:content';

import Breadcrumbs from '~/components/Breadcrumbs.astro';
import Nationality from '~/components/Nationality.astro';
import { constructorColors } from '~/data/colors.js';
import { currentSeason, firstSeason } from '~/data/metadata.js';
import colors from '~/helpers/colors.js';
import MainLayout from '~/layouts/MainLayout.astro';

export const prerender = false;

const { year: yearStr = '' } = Astro.params;
const year = parseInt(yearStr, 10);
const season = await getEntry('seasons', yearStr);

if (!season) {
	return new Response(null, {
		status: 404,
		statusText: 'Not found',
	});
}

const { rounds, teams } = season.data;
const hasPrev = year > firstSeason && year <= currentSeason;
const hasNext = year >= firstSeason && year < currentSeason;

const roundNames = rounds.map((round) => round.name);

const driversChartDataSets = teams.flatMap((team, i) => {
	const color = constructorColors[team.constructorRef] || colors[i] || '';

	return team.drivers.map((driver) => {
		const driverData = rounds.map((round, i) => {
			const roundData = round.driverStandings.find(
				(c) => c.driverRef === driver.driverRef,
			);

			const prevRoundData = rounds[i - 1]?.driverStandings.find(
				(c) => c.driverRef === driver.driverRef,
			);

			if (roundData) {
				return {
					y: roundData.points,
					custom: {
						position: roundData.position,
						wins: roundData.wins,
						positionDelta:
							i > 1
								? (prevRoundData?.position || 0) - (roundData?.position || 0)
								: 0,
					},
				};
			}

			return;
		});

		return {
			name: driver.name,
			data: driverData,
			color,
		};
	});
});

const constructorsChartDataSets = teams.map((team, i) => {
	const teamData = rounds.map((round, i) => {
		const roundData = round.constructorStandings.find(
			(c) => c.constructorRef === team.constructorRef,
		);

		const prevRoundData = rounds[i - 1]?.constructorStandings.find(
			(c) => c.constructorRef === team.constructorRef,
		);

		if (roundData) {
			return {
				y: roundData.points,
				custom: {
					position: roundData.position,
					wins: roundData.wins,
					positionDelta:
						i > 0
							? (prevRoundData?.position || 0) - (roundData?.position || 0)
							: 0,
				},
			};
		}

		return;
	});
	const color = constructorColors[team.constructorRef] || colors[i] || '';

	return {
		name: team.name,
		data: teamData,
		color,
	};
});
---

<MainLayout title={`${year} Season`}>
	<div class="seasons-header">
		<Breadcrumbs
			links={[
				{ label: 'Seasons', href: '/seasons/' },
				{ label: `${year} Season`, href: '' },
			]}
		/>
		<nav class="season-pagination">
			{hasPrev ? <a href={`/seasons/${year - 1}`}>&larr; {year - 1}</a> : null}
			{hasNext ? <a href={`/seasons/${year + 1}`}>{year + 1} &rarr;</a> : null}
		</nav>
	</div>
	<h1>
		{year} Season {currentSeason === year ? '(Current Season)' : ''}
	</h1>
	<div class="tabs">
		<nav class="tab-list">
			<a class="tab tab-active" href="#races">Races</a>
			<a class="tab" href="#teams">Teams</a>
			<a class="tab" href="#driver-standings">Driver Standings</a>
			<a class="tab" href="#constructor-standings">Constructor Standings</a>
		</nav>
		<section class="tab-panel-list">
			<article class="tab-panel tab-active" id="races">
				<table class="table">
					<thead>
						<th>Round</th>
						<th>Race</th>
						<th>Date</th>
						<th>Circuit</th>
						<th>Winner</th>
					</thead>
					<tbody>
						{
							rounds.map((row) => {
								const winner = row.podium[0];
								const winnerConstructor = teams.find(
									(team) => team.constructorRef === winner?.constructorRef,
								);
								const winnerDriver = winnerConstructor?.drivers.find(
									(driver) => driver.driverRef === winner?.driverRef,
								);

								return (
									<tr>
										<td>{row.round}</td>
										<td>
											<a href={`/seasons/${year}/${row.slug}`}>{row.name}</a>
										</td>
										<td>{row.date}</td>
										<td>
											<span>{row.circuit.name}</span>&nbsp;
											<span class="text-lighter text-scale-80">
												{row.circuit.location}, {row.circuit.country}
											</span>
										</td>
										<td>
											{winnerDriver?.nationality ? (
												<Nationality nationality={winnerDriver.nationality} />
											) : null}
											{winnerDriver ? (
												<a href={`/drivers/${winnerDriver.driverRef}`}>
													{winnerDriver.name}
												</a>
											) : null}

											{winnerConstructor ? (
												<span>&nbsp;({winnerConstructor.name})</span>
											) : null}
										</td>
									</tr>
								);
							})
						}
					</tbody>
				</table>
			</article>
			<article class="tab-panel" id="teams">
				<table class="table team-drivers-table">
					<thead>
						<tr>
							<th>Constructor</th>
							<th>Nationality</th>
							<th>Drivers</th>
							<th>Nationality</th>
						</tr>
					</thead>
					<tbody>
						{
							teams.flatMap((team) => {
								return team.drivers.map((driver, i) => (
									<tr>
										{i === 0 ? (
											<td rowspan={team.drivers.length}>{team.name}</td>
										) : null}
										{i === 0 ? (
											<td rowspan={team.drivers.length}>
												{team.nationality ? (
													<>
														<Nationality nationality={team.nationality} />
														<span>{team.nationality}</span>
													</>
												) : (
													'-'
												)}
											</td>
										) : null}
										<td class="driver-name">{driver.name}</td>
										<td>
											{driver.nationality ? (
												<>
													<Nationality nationality={driver.nationality} />
													<span>{driver.nationality}</span>
												</>
											) : (
												'-'
											)}
										</td>
									</tr>
								));
							})
						}
					</tbody>
				</table>
			</article>
			<article class="tab-panel" id="driver-standings">
				<div id="driver-standings-chart" class="chart-wrapper"></div>
			</article>
			<article class="tab-panel" id="constructor-standings">
				<div id="constructor-standings-chart" class="chart-wrapper"></div>
			</article>
		</section>
	</div>
</MainLayout>
<style lang="scss">
	:global(.table).team-drivers-table {
		.driver-name {
			padding-left: 1rem;
		}
	}
</style>
<style is:global>
	.tooltip-table {
		border-collapse: collapse;
		font-size: 0.85rem;

		& tr th,
		& tr td {
			padding: 0.1rem 0.4rem;
		}

		& .position-cell {
			display: flex;
			justify-content: space-between;
			align-items: center;
		}

		& .name-cell {
			display: grid;
			grid-template-columns: 1rem 1fr;

			& > span:first-child {
				display: block;
				text-align: center;
			}
		}
	}
</style>
<script src="https://code.highcharts.com/11/highcharts.js"></script>
<script src="~/client/tabs.ts"></script>
<script
	is:inline
	set:html={`
	document.addEventListener('DOMContentLoaded', function () {
		const commonChartOptions = {
			accessibility: { enabled: false },
			chart: {
				type: 'line',
				backgroundColor: 'transparent',
				borderColor: 'transparent',
				spacing: [30, 30, 48, 10],
				reflow: true,
				height: "${(9 / 16) * 100}%"
			},
			title: {text: ''},
			xAxis: {
				categories: ${JSON.stringify(roundNames)},
				title: { text: 'Round', style: { color: 'white' } },
				crosshair: { snap: true },
				labels: { style: { color: 'white' }}
			},
			yAxis: {
				title: { text: 'Points', style: { color: 'white' } },
				labels: { style: { color: 'white' }}
			},
			legend: {
				itemStyle: { color: 'white' },
				itemHoverStyle: { color: 'white', textDecoration: 'underline' },
				showCheckbox: true,
			},
			tooltip: {
				shared: true,
				split: false,
				useHTML: true,
				formatter() {
					const data = this.points.map((point) => {
						const { x, y, graphic } = point.point;
						const { name, color } = point.series;
						let symbol = '';
						let scale = 1;

						switch (graphic.symbolName) {
							case 'circle':
								symbol = '●';
								scale = 1.35
								break;
							case 'diamond':
								symbol = '♦';
								scale = 1.35
								break;
							case 'square':
								symbol = '■';
								scale = 1.35
								break;
							case 'triangle':
								symbol = '▲';
								scale = 0.9
								break;
							case 'triangle-down':
								symbol = '▼';
								scale = 0.9
								break;
						}


						return {
							name,
							y,
							symbol: '<span style="color:' + color + ';transform:scale('+ scale +')">'+ symbol + '</span>',
							...point.point.custom
						};
					}).sort((a, b) => a.position - b.position);


					const rows = data.map((row) => {
						let delta = '';

						if (row.positionDelta < 0) {
							delta = '<span style="color: red;">▼' + Math.abs(row.positionDelta) + '</span>';
						} else if (row.positionDelta > 0) {
							delta = '<span style="color: green;">▲' + Math.abs(row.positionDelta) + '</span>';
						}

						return [
							'<tr>',
								'<td>',
									'<span class="position-cell">',
										'<span>', row.position, '</span>' ,
										delta,
									'</span>',
								'</td>',
								'<td>',
									'<span class="name-cell">',
										row.symbol,
										'<span>', row.name,'</span>',
									'</span>',
								'</td>',
								'<td>', row.y, '</td>',
								'<td>', row.wins, '</td>',
							'</tr>',
						].join('');
					});

					return [
						'<table class="tooltip-table">',
							'<thead>',
								'<tr>',
									'<th>Position</th>',
									'<th>Driver</th>',
									'<th>Points</th>',
									'<th>Wins</th>',
								'</tr>',
							'</thead>',
							'<tbody>',
								...rows,
							'</tbody>',
						'</table>'
					].join('');
				}
			}
		};
		const driverStandingsChart = Highcharts.chart('driver-standings-chart', {
			...commonChartOptions,
			series: ${JSON.stringify(driversChartDataSets)},
		});

		const constructorStandingsChart = Highcharts.chart('constructor-standings-chart', {
			...commonChartOptions,
			series: ${JSON.stringify(constructorsChartDataSets)},
		});
	});

`}
/>
