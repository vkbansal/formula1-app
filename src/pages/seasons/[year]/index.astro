---
import { getEntry } from 'astro:content';

import MainLayout from '~/layouts/MainLayout.astro';
import Breadcrumbs from '~/components/Breadcrumbs.astro';
import Nationality from '~/components/Nationality.astro';
import { currentSeason, firstSeason } from '~/data/metadata.js';
import { constructorColors } from '~/data/colors.js';
import colors from '~/helpers/colors.js';

export const prerender = false;

const { year: yearStr = '' } = Astro.params;
const year = parseInt(yearStr, 10);
const season = await getEntry('seasons', yearStr);

if (!season) {
	return new Response(null, {
		status: 404,
		statusText: 'Not found',
	});
}

const { rounds, teams } = season.data;
const hasPrev = year > firstSeason && year <= currentSeason;
const hasNext = year >= firstSeason && year < currentSeason;

type IDataPoint = {
	position: number;
	points: number;
	wins: number;
};

type IDataSet = {
	label: string;
	data: IDataPoint[];
	borderColor: string;
	backgroundColor: string;
};

const roundNames = rounds.map((round) => round.name);

const driversChartDataSets = teams.flatMap((team, i): IDataSet[] => {
	const color = constructorColors[team.constructorRef] || colors[i] || '';

	return team.drivers.map((driver): IDataSet => {
		const driverData = rounds
			.map((round) =>
				round.driverStandings.find((c) => c.driverRef === driver.driverRef),
			)
			.filter(Boolean) as IDataPoint[];
		return {
			label: driver.name,
			data: driverData,
			backgroundColor: color,
			borderColor: color,
		};
	});
});

const constructorsChartDataSets = teams.map((team, i): IDataSet => {
	const teamData = rounds
		.map((round) =>
			round.constructorStandings.find(
				(c) => c.constructorRef === team.constructorRef,
			),
		)
		.filter(Boolean) as IDataPoint[];
	const color = constructorColors[team.constructorRef] || colors[i] || '';

	return {
		label: team.name,
		data: teamData,
		backgroundColor: color,
		borderColor: color,
	};
});

const safeConstructorsChartDataSets = constructorsChartDataSets;
const safeDriversChartDataSets = driversChartDataSets;
---

<MainLayout title={`${year} Season`}>
	<div class="seasons-header">
		<Breadcrumbs
			links={[
				{ label: 'Seasons', href: '/seasons/' },
				{ label: `${year} Season`, href: '' },
			]}
		/>
		<nav class="season-pagination">
			{hasPrev ? <a href={`/seasons/${year - 1}`}>&larr; {year - 1}</a> : null}
			{hasNext ? <a href={`/seasons/${year + 1}`}>{year + 1} &rarr;</a> : null}
		</nav>
	</div>
	<h1>
		{year} Season {currentSeason === year ? '(Current Season)' : ''}
	</h1>
	<div class="tabs">
		<nav class="tab-list">
			<a class="tab tab-active" href="#races">Races</a>
			<a class="tab" href="#teams">Teams</a>
			<a class="tab" href="#driver-standings">Driver Standings</a>
			<a class="tab" href="#constructor-standings">Constructor Standings</a>
		</nav>
		<section class="tab-panel-list">
			<article class="tab-panel tab-active" id="races">
				<table class="table">
					<thead>
						<th>Round</th>
						<th>Race</th>
						<th>Date</th>
						<th>Circuit</th>
						<th>Winner</th>
					</thead>
					<tbody>
						{
							rounds.map((row) => {
								const winner = row.podium[0];
								const winnerConstructor = teams.find(
									(team) => team.constructorRef === winner?.constructorRef,
								);
								const winnerDriver = winnerConstructor?.drivers.find(
									(driver) => driver.driverRef === winner?.driverRef,
								);

								return (
									<tr>
										<td>{row.round}</td>
										<td>
											<a href={`/seasons/${year}/${row.slug}`}>{row.name}</a>
										</td>
										<td>{row.date}</td>
										<td>
											<span>{row.circuit.name}</span>&nbsp;
											<span class="text-lighter text-scale-80">
												{row.circuit.location}, {row.circuit.country}
											</span>
										</td>
										<td>
											{winnerDriver?.nationality ? (
												<Nationality nationality={winnerDriver.nationality} />
											) : null}
											{winnerDriver ? (
												<a href={`/drivers/${winnerDriver.driverRef}`}>
													{winnerDriver.name}
												</a>
											) : null}

											{winnerConstructor ? (
												<span>&nbsp;({winnerConstructor.name})</span>
											) : null}
										</td>
									</tr>
								);
							})
						}
					</tbody>
				</table>
			</article>
			<article class="tab-panel" id="teams">
				<table class="table team-drivers-table">
					<thead>
						<tr>
							<th>Constructor</th>
							<th>Nationality</th>
							<th>Drivers</th>
							<th>Nationality</th>
						</tr>
					</thead>
					<tbody>
						{
							teams.flatMap((team) => {
								return team.drivers.map((driver, i) => (
									<tr>
										{i === 0 ? (
											<td rowspan={team.drivers.length}>{team.name}</td>
										) : null}
										{i === 0 ? (
											<td rowspan={team.drivers.length}>
												{team.nationality ? (
													<>
														<Nationality nationality={team.nationality} />
														<span>{team.nationality}</span>
													</>
												) : (
													'-'
												)}
											</td>
										) : null}
										<td class="driver-name">{driver.name}</td>
										<td>
											{driver.nationality ? (
												<>
													<Nationality nationality={driver.nationality} />
													<span>{driver.nationality}</span>
												</>
											) : (
												'-'
											)}
										</td>
									</tr>
								));
							})
						}
					</tbody>
				</table>
			</article>
			<article class="tab-panel" id="driver-standings">
				<div class="chart-wrapper">
					<button type="button" class="btn" id="reset-zoom">Reset Zoom</button>
					<canvas id="driver-standings-chart"></canvas>
					<div class="instructions">
						<div>
							Use <code>Alt/Option</code> + mouse drag selection to zoom
						</div>
						<div>Use mouse drag for panning after zoom</div>
					</div>
				</div>
			</article>
			<article class="tab-panel" id="constructor-standings">
				<div class="chart-wrapper">
					<button type="button" class="btn" id="reset-zoom">Reset Zoom</button>
					<canvas id="constructor-standings-chart"></canvas>
					<div class="instructions">
						<div>
							Use <code>Alt/Option</code> + mouse drag selection to zoom
						</div>
						<div>Use mouse drag for panning after zoom</div>
					</div>
				</div>
			</article>
		</section>
	</div>
</MainLayout>
<style lang="scss">
	:global(.table).team-drivers-table {
		.driver-name {
			padding-left: 1rem;
		}
	}

	.chart-wrapper {
		width: 90%;
		margin: 0 auto;

		& > canvas {
			block-size: 100%;
			aspect-ratio: 2 / 1;
		}

		.instructions {
			display: flex;
			align-items: center;
			justify-content: space-around;
			margin-top: 2rem;
			font-size: 0.85em;
			color: var(--text-lighter);
		}
	}
</style>
<script
	set:html={`
window._roundNames = ${JSON.stringify(roundNames)};
window._constructorsChartDataSets = ${JSON.stringify(
		safeConstructorsChartDataSets,
	)};
window._driversChartDataSets = ${JSON.stringify(safeDriversChartDataSets)};
`}
/>
<script src="~/client/tabs.ts"></script>
<script src="~/client/standings-chart.ts"></script>
