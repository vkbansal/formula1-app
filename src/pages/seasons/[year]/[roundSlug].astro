---
import type { CollectionEntry } from 'astro:content';
import { getCollection, getEntry } from 'astro:content';

import Breadcrumbs from '~/components/Breadcrumbs.astro';
import Nationality from '~/components/Nationality.astro';
import MainLayout from '~/layouts/MainLayout.astro';

export const prerender = false;
const { year: yearStr = '', roundSlug = '' } = Astro.params;
const year = parseInt(yearStr, 10);
const season = await getEntry('seasons', yearStr);
const round = season?.data.rounds.find((r) => r.id === roundSlug);

if (!round) {
	return new Response(null, {
		status: 404,
		statusText: 'Not found',
	});
}

const drivers = (await getCollection('drivers')).reduce<
	Record<string, CollectionEntry<'drivers'>['data']>
>((driversMap, { data }) => {
	driversMap[data.driverRef] = data;
	return driversMap;
}, {});

const constructors = (await getCollection('constructors')).reduce<
	Record<string, CollectionEntry<'constructors'>['data']>
>((constructorsMap, { data }) => {
	constructorsMap[data.constructorRef] = data;
	return constructorsMap;
}, {});

const title = `${year} ${round.name}`;

function sort<T>(arr: T[], sorter: (a: T, b: T) => number): T[] {
	return arr.slice(0).sort(sorter);
}
---

<MainLayout title={title}>
	<Breadcrumbs
		links={[
			{ label: 'Seasons', href: '/seasons/' },
			{ label: `${year} Season`, href: `/seasons/${year}/` },
			{
				label: `${round.name}`,
				href: '',
			},
		]}
	/>
	<h1>{title}</h1>
	<div class="tabs">
		<nav class="tab-list tab-list--spread">
			<a class="tab tab-active" href="#race-result">Race Result</a>
			<a class="tab" href="#starting-grid">Starting Grid</a>
			<a class="tab" href="#qualifying">Qualifying</a>
		</nav>
		<section class="tab-panel-list">
			<article class="tab-panel tab-active" id="race-result">
				<table class="table">
					<thead>
						<tr>
							<th>Position</th>
							<th>Driver</th>
							<th>Team</th>
							<th>Points</th>
						</tr>
					</thead>
					<tbody>
						{
							sort(
								round.results,
								(a, b) => a.positionOrder - b.positionOrder,
							).map((result) => {
								const driver = drivers[result.driverRef];

								return (
									<tr>
										<td>{result.positionText}</td>
										<td>
											{driver?.nationality ? (
												<Nationality nationality={driver.nationality} />
											) : null}
											<span>{driver?.name}</span>
										</td>
										<td>{constructors[result.constructorRef]?.name}</td>
										<td>{result.points}</td>
									</tr>
								);
							})
						}
					</tbody>
				</table>
				<p class="text-lighter">
					R - Retired, D - Disqualified, E - Excluded, W - Withdrawn, F - Failed
					to qualify, N - Not Classified
				</p>
			</article>
			<article class="tab-panel" id="starting-grid">
				<table class="table">
					<thead>
						<tr>
							<th>Position</th>
							<th>Driver</th>
							<th>Team</th>
						</tr>
					</thead>
					<tbody>
						{
							sort(round.results, (a, b) => {
								if (a.grid === 0 && b.grid === 0) {
									return 0;
								}

								if (a.grid === 0 && b.grid !== 0) {
									return 1;
								}

								if (a.grid !== 0 && b.grid === 0) {
									return -1;
								}

								return a.grid - b.grid;
							}).map((result) => {
								const driver = drivers[result.driverRef];

								return (
									<tr>
										<td>{result.grid || 'PL'}</td>
										<td>
											{driver?.nationality ? (
												<Nationality nationality={driver.nationality} />
											) : null}
											<span>{driver?.name}</span>
										</td>
										<td>{constructors[result.constructorRef]?.name}</td>
									</tr>
								);
							})
						}
					</tbody>
				</table>
			</article>
			<article class="tab-panel" id="qualifying">
				<table class="table">
					<thead>
						<tr>
							<th>Position</th>
							<th>Driver</th>
							<th>Team</th>
							<th>Q1</th>
							<th>Q2</th>
							<th>Q3</th>
						</tr>
					</thead>
					<tbody>
						{
							sort(
								round.results,
								(a, b) =>
									(a.qualifying?.position || 0) - (b.qualifying?.position || 0),
							).map((result) => {
								const driver = drivers[result.driverRef];

								return (
									<tr>
										<td>{result.qualifying?.position}</td>
										<td>
											{driver?.nationality ? (
												<Nationality nationality={driver.nationality} />
											) : null}
											<span>{driver?.name}</span>
										</td>
										<td>{constructors[result.constructorRef]?.name}</td>
										<td>{result.qualifying?.q1}</td>
										<td>{result.qualifying?.q2}</td>
										<td>{result.qualifying?.q3}</td>
									</tr>
								);
							})
						}
					</tbody>
				</table>
			</article>
		</section>
	</div>
</MainLayout>
<script src="~/client/tabs.ts"></script>
