---
import type { GetStaticPathsItem } from 'astro';
import MainLayout from 'layouts/MainLayout.astro';
import Breadcrumbs from 'components/Breadcrumbs.astro';
import type { ChartPoint, ChartData } from 'components/StandingsChart/common';
import { StandingsChart } from 'components/StandingsChart/StandingsChart';
import { loadData, type Season } from 'helpers/data';
import colors from 'helpers/colors';

export interface Props {
	season: Season;
	hasPrev: boolean;
	hasNext: boolean;
}

export async function getStaticPaths(): Promise<GetStaticPathsItem[]> {
	const seasons = await loadData('seasons');

	return seasons
		.sort((a, b) => a.year - b.year)
		.map((season) => {
			const hasPrev = seasons[0].year < season.year;
			const hasNext = seasons[seasons.length - 1].year > season.year;

			return {
				params: { year: season.year.toString() },
				props: { season, hasPrev, hasNext },
			};
		});
}

const {
	season: { year, rounds, constructors },
	hasNext,
	hasPrev,
} = Astro.props as Props;

const drivers = constructors.flatMap((c) => c.drivers);
const driversChartData: ChartData[] = drivers.map((driver) => {
	const data = rounds.map((round): ChartPoint | null => {
		const result = round.driverStandings.find((d) => d.driverRef === driver.driverRef);
		const podium = round.podium
			.filter((p) => p.driverRef === driver.driverRef)
			.map((p) => p.position);

		return result
			? {
					points: result.points,
					position: result.position,
					wins: result.wins,
					podium: podium,
			  }
			: null;
	});

	return {
		id: driver.driverRef,
		label: driver.name,
		link: `/drivers/${driver.driverRef}`,
		data,
	};
});

const driverColors = drivers.reduce((p, c, i) => {
	p[`chart-color-${c.driverRef}`] = colors[i];
	return p;
}, {} as Record<string, string>);

const lastRoundWithNoPodiums = rounds.findIndex((round) => round.podium.length === 0) - 1;
const lastCompletedRound = lastRoundWithNoPodiums > -1 ? lastRoundWithNoPodiums : rounds.length - 1;
const chartLabels = rounds.map((r) => r.name);
---

<MainLayout title={`Drivers Standings | ${year} Season`}>
	<div class="seasons-header">
		<Breadcrumbs
			links={[
				{ label: 'Seasons', href: '/seasons/' },
				{ label: `${year} Season`, href: `/seasons/${year}` },
				{ label: 'Driver Standings', href: '' },
			]}
		/>
		<nav class="season-pagination">
			{hasPrev ? <a href={`/seasons/${year - 1}`}>&larr; {year - 1}</a> : null}
			{hasNext ? <a href={`/seasons/${year + 1}`}>{year + 1} &rarr;</a> : null}
		</nav>
	</div>
	<h1>
		Drivers Standings - {year} Season
	</h1>
	<div class="season-tabs">
		<StandingsChart
			data={driversChartData}
			lastCompletedRound={lastCompletedRound}
			labels={chartLabels}
			legendLabel="Driver"
			client:load
		/>
	</div>
</MainLayout>

<style lang="scss" define:vars={{ ...driverColors }}></style>
