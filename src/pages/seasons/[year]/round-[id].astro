---
import { getCollection } from 'astro:content';
import type { CollectionEntry } from 'astro:content';
import type { InferGetStaticPropsType } from 'astro';

import MainLayout from '~/layouts/MainLayout.astro';
import Breadcrumbs from '~/components/Breadcrumbs.astro';
import CarIcon from '~/components/CarIcon.astro';
import Nationality from '~/components/Nationality.astro';
import { constructorColors } from '~/data/colors.js';

export async function getStaticPaths() {
	const rounds = await getCollection('rounds');

	return rounds.map(({ data }) => {
		return {
			params: { year: data.year, id: data.round.toString().padStart(2, '0') },
			props: data,
		};
	});
}

type Props = InferGetStaticPropsType<typeof getStaticPaths>;

const drivers = (await getCollection('drivers')).reduce<
	Record<string, CollectionEntry<'drivers'>['data']>
>((driversMap, { data }) => {
	driversMap[data.driverRef] = data;
	return driversMap;
}, {});
const constructors = (await getCollection('constructors')).reduce<
	Record<string, CollectionEntry<'constructors'>['data']>
>((constructorsMap, { data }) => {
	constructorsMap[data.constructorRef] = data;
	return constructorsMap;
}, {});
const { year = '', ...round } = Astro.props;
const id = round.round.toString().padStart(2, '0');
// const hasPrev = season < currentSeason;
// const hasNext = season > firstSeason;

const title = `${year} ${round.name}`;
const totalLaps = Math.max(
	...round.driversData.map((d) => d.lapPositions.length),
);
const startingGrid = round.driversData.slice(0).sort((a, b) => a.grid - b.grid);
const CAR_SIZE = 35;

function sort<T>(arr: T[], sorter: (a: T, b: T) => number): T[] {
	return arr.slice(0).sort(sorter);
}
---

<MainLayout title={title}>
	<Breadcrumbs
		links={[
			{ label: 'Seasons', href: '/seasons/' },
			{ label: `${year} Season`, href: `/seasons/${year}/` },
			{ label: `Round ${id} - ${round.name}`, href: '' },
		]}
	/>
	<h1>{title}</h1>
	<div class="tabs">
		<nav class="tab-list">
			<a class="tab tab-active" href="#race-result">Race Result</a>
			<a class="tab" href="#starting-grid">Starting Grid</a>
			<a class="tab" href="#qualifying">Qualifying</a>
			<a class="tab" href="#race">Race (Animated)</a>
		</nav>
		<section class="tab-panel-list">
			<article class="tab-panel tab-active" id="race-result">
				<table class="table">
					<thead>
						<tr>
							<th>Position</th>
							<th>Driver</th>
							<th>Team</th>
							<th>Points</th>
						</tr>
					</thead>
					<tbody>
						{
							sort(
								round.driversData,
								(a, b) => a.positionOrder - b.positionOrder,
							).map((result) => {
								const driver = drivers[result.driverRef];

								return (
									<tr>
										<td>{result.positionText}</td>
										<td>
											{driver?.nationality ? (
												<Nationality nationality={driver.nationality} />
											) : null}
											<span>{driver?.name}</span>
										</td>
										<td>{constructors[result.constructorRef]?.name}</td>
										<td>{result.points}</td>
									</tr>
								);
							})
						}
					</tbody>
				</table>
				<p class="text-lighter">
					R - Retired, D - Disqualified, E - Excluded, W - Withdrawn, F - Failed
					to qualify, N - Not Classified
				</p>
			</article>
			<article class="tab-panel" id="starting-grid">
				<table class="table">
					<thead>
						<tr>
							<th>Position</th>
							<th>Driver</th>
							<th>Team</th>
						</tr>
					</thead>
					<tbody>
						{
							sort(round.driversData, (a, b) => a.grid - b.grid).map(
								(result) => {
									const driver = drivers[result.driverRef];

									return (
										<tr>
											<td>{result.grid}</td>
											<td>
												{driver?.nationality ? (
													<Nationality nationality={driver.nationality} />
												) : null}
												<span>{driver?.name}</span>
											</td>
											<td>{constructors[result.constructorRef]?.name}</td>
										</tr>
									);
								},
							)
						}
					</tbody>
				</table>
			</article>
			<article class="tab-panel" id="qualifying">
				<table class="table">
					<thead>
						<tr>
							<th>Position</th>
							<th>Driver</th>
							<th>Team</th>
							<th>Q1</th>
							<th>Q2</th>
							<th>Q3</th>
						</tr>
					</thead>
					<tbody>
						{
							sort(
								round.driversData,
								(a, b) =>
									(a.qualifying?.position || 0) - (b.qualifying?.position || 0),
							).map((result) => {
								const driver = drivers[result.driverRef];

								return (
									<tr>
										<td>{result.qualifying?.position}</td>
										<td>
											{driver?.nationality ? (
												<Nationality nationality={driver.nationality} />
											) : null}
											<span>{driver?.name}</span>
										</td>
										<td>{constructors[result.constructorRef]?.name}</td>
										<td>{result.qualifying?.q1}</td>
										<td>{result.qualifying?.q2}</td>
										<td>{result.qualifying?.q3}</td>
									</tr>
								);
							})
						}
					</tbody>
				</table>
			</article>
			<article class="tab-panel" id="race">
				<p>Note: Lap time data is available from the 1996 season onwards.</p>
				<CarIcon />
				<div class="animation-container" id="animation-container">
					<div class="center-line"></div>
					<div id="laps-container" class="laps-container">
						<div class="lap-container" data-lap="start"></div>
						{
							Array.from({ length: totalLaps }, (_, i) => {
								return <div class="lap-container" data-lap={i + 1} />;
							})
						}
						<div class="lap-container" data-lap="finish"></div>
					</div>
					<div id="drivers-container" class="drivers-container">
						{
							startingGrid.map(({ driverRef, grid, constructorRef }) => {
								const driver = drivers[driverRef];
								const label = `${driver?.name} (${constructors[constructorRef]?.name})`;

								return (
									<div
										class="driver"
										data-label={label}
										data-driverId={driverRef}
										style={{
											'--x': 0,
											'--y': grid,
											color: constructorColors[constructorRef] || 'white',
										}}
									>
										<div class="pit-stop">IN PIT</div>
										<svg width="40" height="40" version="2.0">
											<use href="#f1-car" />
										</svg>
									</div>
								);
							})
						}
					</div>
				</div>
				<div class="animation-controls">
					<div class="lap-progress">
						<input
							id="animation-progress"
							type="range"
							min="0"
							max={totalLaps + 1}
							step="1"
							value="0"
						/>
						<span class="lap-counter">
							<span id="lap-count">0</span>
							<span>/</span>
							<span>{totalLaps}</span>
						</span>
					</div>
					<div class="control-btns">
						<button type="button" id="reset">Reset</button>
						<button type="button" id="play-pause">Play</button>
					</div>
				</div>
			</article>
		</section>
	</div>
</MainLayout>
<style
	lang="scss"
	define:vars={{ carSize: `${CAR_SIZE}px`, totalDrivers: startingGrid.length }}
>
	.animation-container,
	.animation-controls {
		width: 100%;
		max-width: 1280px;
		margin: 1rem auto;
	}
	.animation-container {
		height: calc(calc(var(--totalDrivers) + 4) * var(--carSize));
		background: slategray;
		border-radius: 1%;
		position: relative;

		.laps-container {
			display: flex;
			align-items: stretch;
			width: 100%;
			overflow: hidden;
			height: 100%;
		}

		.lap-container {
			width: 55%;
			height: 100%;
			border-right: 2px solid white;
			flex: 1 0 auto;
			position: relative;

			&::before {
				content: 'Lap ' attr(data-lap);
				display: block;
				white-space: nowrap;
				position: absolute;
				top: 0;
				left: 50%;
				transform: translateX(-50%);
				background: white;
				color: black;
				padding: 0.25rem 0.5rem;
				border-radius: 0 0 4px 0;
			}

			&:first-of-type,
			&:last-of-type {
				&::before {
					content: attr(data-lap);
					text-transform: uppercase;
					background: none;
					color: white;
					padding: 0;
					font-size: 3rem;
					letter-spacing: 1ch;
				}
			}

			&:first-of-type {
				&::before {
					top: 50%;
					right: 0%;
					left: unset;
					transform: rotate(90deg) translateY(-150%);
				}
			}

			&:last-of-type {
				border-right: none;
				&::before {
					left: 0;
					top: 50%;
					transform: rotate(90deg) translateY(200%);
				}
			}
		}

		.drivers-container {
			position: absolute;
			top: 0;
			width: 100px;
			height: 100%;
			left: calc(50% - 100px);

			& .driver {
				position: absolute;
				top: 30px;
				transform: translateX(calc(var(--y) * -5px))
					translateY(calc(var(--y) * var(--carSize)));
				transition: transform 0.6s ease-in-out;
				height: 40px;
				display: flex;
				align-items: center;
				gap: 0.5rem;

				.pit-stop {
					position: absolute;
					top: 50%;
					right: 102%;
					transform: translateY(-50%);
					background-color: var(--red-500);
					color: white;
					display: block;
					white-space: nowrap;
					padding: 0 0.5rem;
					font-size: 0.85rem;
					border-radius: 0.5em;
					opacity: 0;
					transition: opacity 0.4s ease-in-out;
				}

				&::after {
					content: attr(data-label);
					display: block;
					transform: translateY(10%);
					color: white;
					background: rgba(0, 0, 0, 0.75);
					padding: 0.25rem;
					border-radius: 0.25rem;
					white-space: nowrap;
					line-height: 1;
					font-size: 0.85rem;
				}

				&[data-pit-stop] > .pit-stop {
					opacity: 1;
				}

				&[data-status]::before {
					content: attr(data-status);
					position: absolute;
					top: 50%;
					right: 102%;
					transform: translateY(-50%);
					background-color: slategray;
					color: white;
					display: block;
					white-space: nowrap;
					padding: 0 0.5rem;
					font-size: 0.85rem;
					border-radius: 0.5em;
				}

				&[data-status='1']::before {
					background-color: goldenrod;
				}

				&[data-status='2']::before {
					background-color: silver;
				}

				&[data-status='3']::before {
					background-color: chocolate;
				}

				&[data-status='R']::before {
					content: 'Retired';
					background-color: var(--red-600);
				}

				&[data-status='D']::before {
					content: 'Disqualified';
					background-color: var(--red-600);
				}

				&[data-status='W']::before {
					content: 'Withdrawn';
					background-color: var(--red-600);
				}

				&[data-status='F']::before {
					content: 'Failed to qualify';
					background-color: var(--red-600);
				}

				&[data-status='N']::before {
					content: 'Not Classified';
					background-color: var(--red-600);
				}
			}

			&[data-lap='start'] .driver {
				transform: translateX(-50px) translateY(calc(var(--y) * var(--carSize)));
			}

			&[data-lap='finish'] .driver {
				transform: translateX(150px) translateY(calc(var(--y) * var(--carSize)));
			}
		}
	}

	.animation-controls {
		margin-top: 1rem;

		.lap-progress {
			display: flex;
			align-items: center;
			justify-content: space-between;
		}

		.lap-counter {
			display: flex;
			align-items: center;
		}

		#animation-progress {
			display: inline-block;
			width: 90%;
			flex: 0 1 auto;
		}

		.control-btns {
			margin-top: 1rem;
		}
	}
</style>
<script define:vars={{ data: round }}>
	window._raceData = data;
</script>
<script src="./_client/tabs.ts"></script>
<script src="./_client/race-animation.ts"></script>
