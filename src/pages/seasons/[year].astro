---
import type { GetStaticPathsItem } from 'astro';
import MainLayout from 'layouts/MainLayout.astro';
import Breadcrumbs from 'components/Breadcrumbs.astro';
import { SeasonsClient } from 'client/seaons/seasons';
import { loadData } from 'helpers/data';
import colors from 'helpers/colors';

const seasons = await loadData('seasons');

export async function getStaticPaths(): Promise<GetStaticPathsItem[]> {
	return seasons.map((year) => ({ params: { year: year.toString() } }));
}

const { year: yearStr } = Astro.params;
const year = parseInt(yearStr as string, 10);
const { rounds, drivers, constructors } = await loadData(`seasons/${yearStr}`);
const metadata = await loadData('metadata');
const driverColors = drivers.reduce((p, c, i) => {
	p[`chart-color-${c.driverRef}`] = colors[i];
	return p;
}, {} as Record<string, string>);

const constructorsColors = constructors.reduce((p, c, i) => {
	p[`chart-color-${c.constructorRef}`] = colors[i];
	return p;
}, {} as Record<string, string>);
const hasPrev = seasons[0] < year;
const hasNext = seasons[seasons.length - 1] > year;
---

<MainLayout title="Home">
	<div class="seasons-header">
		<Breadcrumbs
			links={[
				{ label: 'Seasons', href: '/seasons/' },
				{ label: `${year} Season`, href: '' },
			]}
		/>
		<nav class="season-pagination">
			{hasPrev ? <a href={`/seasons/${year - 1}`}>&larr; {year - 1}</a> : null}
			{hasNext ? <a href={`/seasons/${year + 1}`}>{year + 1} &rarr;</a> : null}
		</nav>
	</div>
	<h1>
		{year} Season {metadata.currentSeason === year ? '(Current Season)' : ''}
	</h1>
	<div class="season-tabs">
		<SeasonsClient rounds={rounds} drivers={drivers} constructors={constructors} client:load />
	</div>
</MainLayout>

<style lang="scss" define:vars={{ ...driverColors, ...constructorsColors }}>
	.seasons-header {
		display: flex;
		align-items: center;
		justify-content: space-between;
	}

	.season-pagination {
		font-size: 0.85rem;
		display: flex;
		gap: 1rem;

		a {
			color: var(--text-lighter);
			text-decoration: none;
		}
	}

	.season-tabs {
		margin: 0 0 2rem 0;

		& :global(.races-table-panel) {
			padding: 1rem 0 3rem 0;
		}

		& .line-group {
			cursor: pointer;

			& > circle:hover {
				fill: white;
			}
		}

		& :global(.points-chart) {
			display: grid;
			grid-template-columns: 4fr minmax(500px, 1fr);
		}

		& :global(.points-legend) {
			padding-top: 2rem;
		}

		& :global(.points-legend-position) {
			display: flex;
			align-items: center;
			justify-content: space-between;
			white-space: nowrap;

			& > :global(.points-legend-position-gain) {
				font-size: 0.875em;
			}

			& :global(.gain-up) {
				display: inline-block;
				transform: translateY(5%);
				margin-left: 0.1rem;
			}

			& :global(.gain-down) {
				display: inline-block;
				transform: translateY(5%);
				margin-left: 0.1rem;
			}
		}

		& :global(.points-legend-label) {
			display: flex;
			align-items: center;
			justify-content: space-between;
			white-space: nowrap;

			& :global(.points-legend-label-color) {
				display: flex;
				align-items: center;

				&::before {
					content: '';
					display: inline-block;
					width: 1em;
					height: 1em;
					border-radius: 2px;
					margin-right: 0.5em;
					background-color: var(--legend-color);
				}
			}

			& :global(.trophy) {
				display: inline-block;
				width: 1rem;
				height: 1rem;
				margin-left: 0.5rem;

				&.trophy-1 {
					color: gold;
				}

				&.trophy-2 {
					color: silver;
				}

				&.trophy-3 {
					color: #cd7f32;
				}

				& svg {
					width: 1rem;
					height: 1rem;
				}
			}
		}
	}
</style>
