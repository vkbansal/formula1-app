---
import { getEntry } from 'astro:content';

import Breadcrumbs from '~/components/Breadcrumbs.astro';
import Nationality from '~/components/Nationality.astro';
import seasonsList from '~/data/seasons-list.json';
import { formatOrdinals } from '~/helpers/utils.js';
import MainLayout from '~/layouts/MainLayout.astro';

export const prerender = false;

const { driverRef = '' } = Astro.params;
const driver = await getEntry('drivers', driverRef);

if (!driver) {
	return new Response(null, {
		status: 404,
		statusText: 'Not found',
	});
}

const {
	seasons,
	championshipStandings,
	totalRaces,
	raceWins,
	name,
	image,
	nationality,
	podiums,
	totalLaps,
	lapsLead,
	dob,
} = driver.data;

const totalRoundsInSeasons = seasonsList.reduce<Record<string, number>>(
	(all, current) => {
		all[current.year] = current.totalRaces;
		return all;
	},
	{},
);
const maxRounds = Math.max(...Object.values(totalRoundsInSeasons));
const maxRoundsArr = Array.from({ length: maxRounds });

const winPct = `${
	totalRaces > 0 ? ((raceWins * 100) / totalRaces).toFixed(2) : '0.00'
}%`;
const lapsLeadPct = `${
	typeof totalLaps === 'number' && typeof lapsLead === 'number'
		? totalLaps > 0
			? ((lapsLead * 100) / totalLaps).toFixed(2)
			: '0.00'
		: ''
}%`;
const wonChampionships = championshipStandings
	.filter((c) => c.position === 1)
	.map((c) => c.year);
---

<MainLayout title={`${name}`}>
	<div class="driver-page">
		<Breadcrumbs
			links={[
				{ label: 'Drivers', href: '/drivers/' },
				{ label: name, href: '' },
			]}
		/>
		<h1>{name}</h1>
		<div class="driver-info">
			<div>
				{image ? <img class="profile-pic" src={image} alt={name} /> : null}
			</div>
			<table class="table table-sm">
				<tbody>
					<tr>
						<th>Name</th>
						<td>{name}</td>
					</tr>
					<tr>
						<th>Date of Birth</th>
						<td>{dob}</td>
					</tr>
					<tr>
						<th>Nationality</th>
						<td>
							{
								nationality ? (
									<>
										<span>{nationality}</span>
										<Nationality nationality={nationality} />
									</>
								) : (
									'-'
								)
							}
						</td>
					</tr>
					<tr>
						<th>Total Races</th>
						<td>{totalRaces}</td>
					</tr>
					<tr>
						<th>Races Won</th>
						<td>{raceWins} ({winPct})</td>
					</tr>
					<tr>
						<th>Podiums</th>
						<td>{podiums}</td>
					</tr>
					<tr>
						<th>Total Laps</th>
						<td>{totalLaps}</td>
					</tr>
					<tr>
						<th>Laps Lead</th>
						<td>
							{
								typeof lapsLead === 'number'
									? `${lapsLead} (${lapsLeadPct})`
									: 'N/A'
							}
						</td>
					</tr>
					<tr>
						<th>World Championships Won</th>
						<td>
							<span>{wonChampionships.length}</span>
							{
								wonChampionships.length > 0 ? (
									<span>({wonChampionships.join(', ')})</span>
								) : null
							}
						</td>
					</tr>
				</tbody>
			</table>
		</div>
		<h2>Race Results</h2>
		<table class="table table-sm">
			<thead>
				<tr class="table-divider">
					<th>Season</th>
					<th>Constructor</th>
					{maxRoundsArr.map((_, i) => <th class="text-center">R{i + 1}</th>)}
					<th class="text-center">WDC</th>
				</tr>
			</thead>
			<tbody>
				{
					seasons.flatMap((season) => {
						const wdcStanding = championshipStandings.find(
							(c) => c.year === season.year,
						);
						const constructorsInSeason = [
							...new Set(season.results.map((r) => r.constructor)),
						];

						return constructorsInSeason.map((con, i) => {
							const results = season.results.filter(
								(r) => r.constructor === con,
							);

							return (
								<tr
									class:list={{
										'table-divider': i === constructorsInSeason.length - 1,
									}}
								>
									{i === 0 ? (
										<th rowspan={constructorsInSeason.length}>{season.year}</th>
									) : null}
									<td class="constructor-name-cell">{con}</td>
									{maxRoundsArr.map((_, i) => {
										const round = results.find((r) => r.round === i + 1);

										if (i + 1 > season.results.length) {
											return <td class="text-center">-</td>;
										}

										if (!round) {
											return <td class="text-center">-</td>;
										}

										return (
											<td class="text-center">
												<div>
													{round.position
														? formatOrdinals(round.position)
														: '-'}
												</div>
											</td>
										);
									})}
									{i === 0 ? (
										<td
											class="text-center"
											rowspan={constructorsInSeason.length}
										>
											{wdcStanding?.position
												? formatOrdinals(wdcStanding.position)
												: '-'}
										</td>
									) : null}
								</tr>
							);
						});
					})
				}
			</tbody>
		</table>
	</div>
</MainLayout>
<style lang="scss">
	.driver-page {
		margin-bottom: 4rem;

		:global(.constructor-name-cell) {
			padding-left: 0.5rem !important;
		}

		:global(.table-divider, .table-divider td, .table-divider th) {
			box-shadow: 0px 1px 0px var(--border-darker) !important;
		}

		.profile-pic {
			display: inline-block;
			height: 500px;
			border-radius: 1rem;
			border: 2px solid var(--red-600);
		}

		.driver-info {
			display: flex;
			gap: 2rem;
		}

		.table {
			flex: 1 0 auto;
			border-top: 1px solid var(--border);
		}
	}
</style>
